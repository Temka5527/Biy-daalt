# The functions you provided
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def binary_search(arr, target, low, high):
    if high >= low:
        mid = (high + low) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            return binary_search(arr, target, low, mid - 1)
        else:
            return binary_search(arr, target, mid + 1, high)
    else:
        return -1


def merge_sort_recursive(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left_half = merge_sort_recursive(arr[:mid])
    right_half = merge_sort_recursive(arr[mid:])

    return merge(left_half, right_half)

def merge(left, right):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    result.extend(left[i:])
    result.extend(right[j:])
    return result



def find_max_recursive(arr):
    if len(arr) == 1:
        return arr[0]

    mid = len(arr) // 2
    left_max = find_max_recursive(arr[:mid])
    right_max = find_max_recursive(arr[mid:])
    return max(left_max, right_max)


import unittest

def read_input_output(filename):
    try:
        with open(filename, 'r') as file:
            data = file.readlines()
            A = list(map(int, data[0].strip().split()))  # Анхны мөр нь оруулах массив
            B = list(map(int, data[1].strip().split()))  # Хоёрдугаар мөр нь хүлээгдэж буй сортлогдсон массив
            return A, B
    except FileNotFoundError:
        print(f"Алдаа: Файл '{filename}' олдсонгүй.")
        raise  # Үргэлжлүүлэхийн тулд алдааг дахин дэвшүүлнэ
    except ValueError as e:
        print(f"Алдаа: Өгөгдлийг хөрвүүлэх боломжгүй. Файлын формат шалгана уу. {e}")
        raise  # Үргэлжлүүлэхийн тулд алдааг дахин дэвшүүлнэ

# Юнит тестийн анги
class TestSortingAndSearching(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # Бүх тестийн хувьд файлын өгөгдлийг нэг удаа уншина
        cls.A, cls.B = read_input_output('test_data.txt')

    # Нэвтрэлтийн сортын тест
    def test_insertion_sort(self):
        sorted_A = insertion_sort(self.A.copy())
        print(f"insortion sort: {sorted_A}")
        self.assertEqual(sorted_A, self.B, "insertion sort failed!")

    # Бинар хайалтын тест
    def test_binary_search(self):
        sorted_A = insertion_sort(self.A.copy())  # Эхлээд массивыг сортлож байна
        target = self.B[1]  # Сортлогдсон массивын хоёрдугаар элемент
        result = binary_search(sorted_A, target, 0, len(sorted_A) - 1)
        print(f"binary search: {result} target {target}")
        self.assertEqual(result, 1, "binary search failed!")

    # Нэгдсэн сортын тест
    def test_merge_sort(self):
        sorted_A = merge_sort_recursive(self.A.copy())
        print(f"merge sort: {sorted_A}")
        self.assertEqual(sorted_A, self.B, "merge  sort failed!")

    # Дээд утгын тест
    def test_find_max(self):
        max_value = find_max_recursive(self.A.copy())
        print(f"max value: {max_value}")
        self.assertEqual(max_value, max(self.B), "max value failed!")

if __name__ == '__main__':
    # unittest.main() -г орлуулахын тулд энэ кодыг ашиглана
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestSortingAndSearching)

    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(suite)
